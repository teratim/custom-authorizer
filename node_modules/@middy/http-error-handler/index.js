"use strict";

const {
  jsonSafeParse,
  normalizeHttpResponse
} = require('@middy/util');

const defaults = {
  logger: console.error,
  fallbackMessage: null
};

const httpErrorHandlerMiddleware = (opts = {}) => {
  const options = { ...defaults,
    ...opts
  };

  const httpErrorHandlerMiddlewareOnError = async request => {
    var _request$error, _request$error2, _request$error3, _request$error4, _request$error5;

    if (typeof options.logger === 'function') {
      options.logger(request.error);
    } // Set default expose value, only passes in when there is an override


    if ((_request$error = request.error) !== null && _request$error !== void 0 && _request$error.statusCode && ((_request$error2 = request.error) === null || _request$error2 === void 0 ? void 0 : _request$error2.expose) === undefined) {
      request.error.expose = request.error.statusCode < 500;
    } // Non-http error OR expose set to false


    if (options.fallbackMessage && (!((_request$error3 = request.error) !== null && _request$error3 !== void 0 && _request$error3.statusCode) || !((_request$error4 = request.error) !== null && _request$error4 !== void 0 && _request$error4.expose))) {
      request.error = {
        statusCode: 500,
        message: options.fallbackMessage,
        expose: true
      };
    }

    if ((_request$error5 = request.error) !== null && _request$error5 !== void 0 && _request$error5.expose) {
      var _request$error6, _request$error7;

      request.response = normalizeHttpResponse(request.response);
      request.response.statusCode = (_request$error6 = request.error) === null || _request$error6 === void 0 ? void 0 : _request$error6.statusCode;
      request.response.body = (_request$error7 = request.error) === null || _request$error7 === void 0 ? void 0 : _request$error7.message;
      request.response.headers['Content-Type'] = typeof jsonSafeParse(request.response.body) === 'string' ? 'plain/text' : 'application/json';
      return request.response;
    }
  };

  return {
    onError: httpErrorHandlerMiddlewareOnError
  };
};

module.exports = httpErrorHandlerMiddleware;
